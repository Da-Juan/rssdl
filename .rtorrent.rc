# Global upload and download rate in KiB. "0" for unlimited.
throttle.global_down.max_rate.set_kb = 0
throttle.global_up.max_rate.set_kb   = 2000

# Maximum number of simultaneous downloads
throttle.max_downloads.global.set = 10
# Maximum number of simultaneous uploads
throttle.max_uploads.global.set   = 20

# Maximum and minimum number of peers to connect to per torrent while downloading (`min_peers`, `max_peers`) Default: `100` and `200` respectively
throttle.min_peers.normal.set = 1
throttle.max_peers.normal.set = 100

# Same as above but for seeding completed torrents (seeds per torrent), `-1` for same as downloading (`min_peers_seed`, `max_peers_seed`) Default: `-1` for both
throttle.min_peers.seed.set = -1
throttle.max_peers.seed.set = 50

# Maximum number of simultaneous downloads and uploads slots per torrent (`max_uploads`) Default: `50` for both
throttle.max_downloads.set = 50
throttle.max_uploads.set = 50

# Set the numwant field sent to the tracker, which indicates how many peers we want. 
#  A negative value disables this feature. Default: `-1` (`tracker_numwant`)
trackers.numwant.set = 100

# Default directory to save the downloaded torrents.
directory.default.set = /home/rtorrent/InProgress

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session.path.set = /home/rtorrent/.sessions

# Watch a directory for new torrents, and stop those that have been
# deleted.
schedule2 = watch_directory_1,5,5,"load.start=/home/rtorrent/Torrents/Dir1/*.torrent,d.custom1.set=/home/rtorrent/Finished/Dir1/"
schedule2 = watch_directory_2,5,5,"load.start=/home/rtorrent/Torrents/Dir2/*.torrent,d.custom1.set=/home/rtorrent/Finished/Dir2/"

# On completion, move the torrent to the directory from custom1 or to default directory if custom1 is not set.
method.insert = is_custom1_set,simple,"and={d.custom1=}"
method.insert = move_to_default_dir,simple,"d.directory.set=/home/rtorrent/Finished/;execute=mv,-u,$d.base_path=,/home/rtorrent/Finished/;execute=/home/rtorrent/Scripts/rssdl/rtorrentlog.sh,$d.name="
method.insert = move_to_custom1,simple,"d.directory.set=$d.custom1=;execute=mv,-u,$d.base_path=,$d.custom1=;execute=/home/rtorrent/Scripts/rssdl/rtorrentlog.sh,$d.name="
method.set_key = event.download.finished,move_complete,"branch=is_custom1_set=,move_to_custom1=,move_to_default_dir="

# Close torrents when diskspace is low.
schedule2 = low_diskspace,5,60,((close_low_diskspace,2000M))


# Save all the sessions in every 12 hours instead of the default 20 minutes.
schedule2 = session_save, 1200, 43200, ((session.save))

# Enable the default ratio group.
ratio.enable=
# Change the limits, the defaults should be sufficient.
# Upload to a minimum ratio of 1.0
ratio.min.set=100
# Upload to a maximum ratio of 5.0
ratio.max.set=500
# Upload a minimum of 2GB
ratio.upload.set=2G

# When seeding ratio is reached close the torrent
method.set = group.seeding.ratio.command, d.close=, d.erase=

# Listening port for incoming peer traffic (randomized)
network.port_range.set = 33101-33199
network.port_random.set = yes

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

# Sort the main view by ratio
view.sort_current = main,greater=d.ratio=
view.sort_new = main,less=d.ratio=
view.sort = main

# Sort the seeding view by the upload rate and only show torrents with peers
view.sort_current = seeding,greater=d.up.rate=
view.filter = seeding,"and=d.complete=,d.peers_connected="
view.sort_new = seeding,less=d.up.rate=
view.sort = seeding

# Sort the leeching view by name
view.sort_current = leeching,greater=d.name=
view.sort_new = leeching,greater=d.name=
view.sort = leeching

# Filter the active view by connected peers
view.sort_current = active,less=d.name=
view.sort_new = leeching,less=d.name=
view.filter = active,d.peers_connected=
view.sort = active

schedule = sort_main,11,5,view.sort=main
schedule = sort_seeding,12,5,view.sort=seeding
schedule = sort_leeching,13,5,view.sort=leeching
schedule = sort_active,14,5,view.sort=active

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
# 
# UDP port to use for DHT. 
dht.mode.set = auto

# UDP port to use for DHT
dht.port.set = 6881

# Enable peer exchange (for torrents not marked private)
#peer_exchange = yes
# Enable/disable peer exchange for torrents that aren't marked private. Disabled by default. (peer_exchange)
protocol.pex.set = 1
